

  // Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.
  "files.autoSave": "off",

  // Controls the font size in pixels.
  "editor.fontSize": 14,

  // Controls the font family.
  "editor.fontFamily": "Consolas, 'Courier New', monospace",

  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 4,

  // Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.
  "editor.renderWhitespace": "none",

  // Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'
  "editor.cursorStyle": "line",

  // The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on macOS. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier.
  "editor.multiCursorModifier": "alt",

  // Insert spaces when pressing Tab. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": true,

  // Controls how lines should wrap. Can be:
  //  - 'off' (disable wrapping),
  //  - 'on' (viewport wrapping),
  //  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or
  //  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).
  "editor.wordWrap": "off",

  // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true
  },

  // Configure file associations to languages (e.g. "*.extension": "html"). These have precedence over the default associations of the languages installed.
  "files.associations": {}

}
,
{


  // Controls if the diff editor shows changes in leading or trailing whitespace as diffs
  "diffEditor.ignoreTrimWhitespace": true,

  // Controls if the diff editor shows +/- indicators for added/removed changes
  "diffEditor.renderIndicators": true,

  // Controls if the diff editor shows the diff side by side or inline
  "diffEditor.renderSideBySide": true,

  // Controls if suggestions should be accepted on commit characters. For instance in JavaScript the semi-colon (';') can be a commit character that accepts a suggestion and types that character.
  "editor.acceptSuggestionOnCommitCharacter": true,

  // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
  "editor.acceptSuggestionOnEnter": "on",

  // Controls whether the editor should run in a mode where it is optimized for screen readers.
  "editor.accessibilitySupport": "auto",

  // Controls if the editor should automatically close brackets after opening them
  "editor.autoClosingBrackets": true,

  // Controls if the editor should automatically adjust the indentation when users type, paste or move lines. Indentation rules of the language must be available.
  "editor.autoIndent": true,

  // Code action kinds to be run on save.
  "editor.codeActionsOnSave": {},

  // Timeout for code actions run on save.
  "editor.codeActionsOnSaveTimeout": 750,

  // Controls if the editor shows CodeLens
  "editor.codeLens": true,

  // Controls whether the editor should render the inline color decorators and color picker.
  "editor.colorDecorators": true,

  // Control the cursor animation style.
  "editor.cursorBlinking": "blink",

  // Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'
  "editor.cursorStyle": "line",

  // Controls the width of the cursor when editor.cursorStyle is set to 'line'
  "editor.cursorWidth": 0,

  // When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents.
  "editor.detectIndentation": true,

  // Controls if the editor should allow to move selections via drag and drop.
  "editor.dragAndDrop": true,

  // Controls whether copying without a selection copies the current line.
  "editor.emptySelectionClipboard": true,

  // Controls if Find in Selection flag is turned on when multiple characters or lines of text are selected in the editor
  "editor.find.autoFindInSelection": false,

  // Controls if we seed the search string in Find Widget from editor selection
  "editor.find.seedSearchStringFromSelection": true,

  // Controls whether the editor has code folding enabled
  "editor.folding": true,

  // Controls the way folding ranges are computed. 'auto' picks uses a language specific folding strategy, if available. 'indentation' forces that the indentation based folding strategy is used.
  "editor.foldingStrategy": "auto",

  // Controls the font family.
  "editor.fontFamily": "Consolas, 'Courier New', monospace",

  // Enables font ligatures
  "editor.fontLigatures": false,

  // Controls the font size in pixels.
  "editor.fontSize": 14,

  // Controls the font weight.
  "editor.fontWeight": "normal",

  // Controls if the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": false,

  // Format a file on save. A formatter must be available, the file must not be auto-saved, and editor must not be shutting down.
  "editor.formatOnSave": false,

  // Format on save timeout. Specifies a time limit in milliseconds for formatOnSave-commands. Commands taking longer than the specified timeout will be cancelled.
  "editor.formatOnSaveTimeout": 750,

  // Controls if the editor should automatically format the line after typing
  "editor.formatOnType": false,

  // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
  "editor.glyphMargin": true,

  // Controls if the cursor should be hidden in the overview ruler.
  "editor.hideCursorInOverviewRuler": false,

  // Controls whether the editor should highlight the active indent guide
  "editor.highlightActiveIndentGuide": true,

  // Controls the delay after which to show the hover
  "editor.hover.delay": 300,

  // Controls if the hover is shown
  "editor.hover.enabled": true,

  // Controls if the hover should remain visible when mouse is moved over it
  "editor.hover.sticky": true,

  // Insert spaces when pressing Tab. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": true,

  // Special handling for large files to disable certain memory intensive features.
  "editor.largeFileOptimizations": true,

  // Controls the letter spacing in pixels.
  "editor.letterSpacing": 0,

  // Enables the code action lightbulb
  "editor.lightbulb.enabled": true,

  // Controls the line height. Use 0 to compute the lineHeight from the fontSize.
  "editor.lineHeight": 0,

  // Controls the display of line numbers.
  "editor.lineNumbers": "on",

  // Controls whether the editor should detect links and make them clickable
  "editor.links": true,

  // Highlight matching brackets when one of them is selected.
  "editor.matchBrackets": true,

  // Controls if the minimap is shown
  "editor.minimap.enabled": true,

  // Limit the width of the minimap to render at most a certain number of columns
  "editor.minimap.maxColumn": 120,

  // Render the actual characters on a line (as opposed to color blocks)
  "editor.minimap.renderCharacters": true,

  // Controls whether the minimap slider is automatically hidden.
  "editor.minimap.showSlider": "mouseover",

  // Controls the side where to render the minimap.
  "editor.minimap.side": "right",

  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events
  "editor.mouseWheelScrollSensitivity": 1,

  // Zoom the font of the editor when using mouse wheel and holding Ctrl
  "editor.mouseWheelZoom": false,

  // Merge multiple cursors when they are overlapping.
  "editor.multiCursorMergeOverlapping": true,

  // The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on macOS. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier.
  "editor.multiCursorModifier": "alt",

  // Controls whether the editor should highlight semantic symbol occurrences
  "editor.occurrencesHighlight": true,

  // Controls if a border should be drawn around the overview ruler.
  "editor.overviewRulerBorder": true,

  // Controls the number of decorations that can show up at the same position in the overview ruler
  "editor.overviewRulerLanes": 3,

  // Enables pop-up that shows parameter documentation and type information as you type
  "editor.parameterHints": true,

  // Controls if suggestions should automatically show up while typing
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": false
  },

  // Controls the delay in ms after which quick suggestions will show up
  "editor.quickSuggestionsDelay": 10,

  // Controls whether the editor should render control characters
  "editor.renderControlCharacters": false,

  // Controls whether the editor should render indent guides
  "editor.renderIndentGuides": true,

  // Controls how the editor should render the current line highlight, possibilities are 'none', 'gutter', 'line', and 'all'.
  "editor.renderLineHighlight": "line",

  // Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.
  "editor.renderWhitespace": "none",

  // Controls if selections have rounded corners
  "editor.roundedSelection": true,

  // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty
  "editor.rulers": [],

  // Controls the number of extra characters beyond which the editor will scroll horizontally
  "editor.scrollBeyondLastColumn": 5,

  // Controls if the editor will scroll beyond the last line
  "editor.scrollBeyondLastLine": true,

  // Controls whether the editor should highlight similar matches to the selection
  "editor.selectionHighlight": true,

  // Controls whether the fold controls on the gutter are automatically hidden.
  "editor.showFoldingControls": "mouseover",

  // Controls fading out of unused code.
  "editor.showUnused": true,

  // Controls if the editor will scroll using an animation
  "editor.smoothScrolling": false,

  // Controls whether snippets are shown with other suggestions and how they are sorted.
  "editor.snippetSuggestions": "inline",

  // Keep peek editors open even when double clicking their content or when hitting Escape.
  "editor.stablePeek": false,

  // Font size for the suggest widget
  "editor.suggestFontSize": 0,

  // Line height for the suggest widget
  "editor.suggestLineHeight": 0,

  // Controls if suggestions should automatically show up when typing trigger characters
  "editor.suggestOnTriggerCharacters": true,

  // Controls how suggestions are pre-selected when showing the suggest list.
  "editor.suggestSelection": "recentlyUsed",

  // Insert snippets when their prefix matches. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": false,

  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 4,

  // Overrides editor colors and font style from the currently selected color theme.
  "editor.tokenColorCustomizations": {},

  // Remove trailing auto inserted whitespace
  "editor.trimAutoWhitespace": true,

  // Inserting and deleting whitespace follows tab stops
  "editor.useTabStops": true,

  // Controls whether completions should be computed based on words in the document.
  "editor.wordBasedSuggestions": true,

  // Characters that will be used as word separators when doing word related navigations or operations
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // Controls how lines should wrap. Can be:
  //  - 'off' (disable wrapping),
  //  - 'on' (viewport wrapping),
  //  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or
  //  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).
  "editor.wordWrap": "off",

  // Controls the wrapping column of the editor when `editor.wordWrap` is 'wordWrapColumn' or 'bounded'.
  "editor.wordWrapColumn": 80,

  // Controls the indentation of wrapped lines. Can be one of 'none', 'same', 'indent' or 'deepIndent'.
  "editor.wrappingIndent": "same"

}
,
{


  // Whether to always show the Source Control Provider section.
  "scm.alwaysShowProviders": false,

  // Controls diff decorations in the editor.
  "scm.diffDecorations": "all",

  // Controls the width(px) of diff decorations in gutter (added & modified).
  "scm.diffDecorationsGutterWidth": 3

}
,
{


  // Controls the visibility of the activity bar in the workbench.
  "workbench.activityBar.visible": true,

  // Overrides colors from the currently selected color theme.
  "workbench.colorCustomizations": {},

  // Specifies the color theme used in the workbench.
  "workbench.colorTheme": "Default Dark+",

  // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
  "workbench.commandPalette.history": 50,

  // Controls if the last typed input to the command palette should be restored when opening it the next time.
  "workbench.commandPalette.preserveInput": false,

  // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
  "workbench.editor.closeEmptyGroups": true,

  // Controls if editors showing a file should close automatically when the file is deleted or renamed by some other process. Disabling this will keep the editor open as dirty on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
  "workbench.editor.closeOnFileDelete": true,

  // Controls if opened editors show as preview. Preview editors are reused until they are kept (e.g. via double click or editing) and show up with an italic font style.
  "workbench.editor.enablePreview": true,

  // Controls if opened editors from Quick Open show as preview. Preview editors are reused until they are kept (e.g. via double click or editing).
  "workbench.editor.enablePreviewFromQuickOpen": true,

  // Controls the format of the label for an editor. Changing this setting can for example make it easier to understand the location of a file:
  // - short:   'parent'
  // - medium:  'workspace/src/parent'
  // - long:    '/home/user/workspace/src/parent'
  // - default: '.../parent', when another tab shares the same title, or the relative workspace path if tabs are disabled
  "workbench.editor.labelFormat": "default",

  // Controls where editors open. Select 'left' or 'right' to open editors to the left or right of the currently active one. Select 'first' or 'last' to open editors independently from the currently active one.
  "workbench.editor.openPositioning": "right",

  // Controls the default direction of editors that are opened side by side (e.g. from the explorer). By default, editors will open on the right hand side of the currently active one. If changed to open down, the editors will open below the currently active one.
  "workbench.editor.openSideBySideDirection": "right",

  // Controls if an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
  "workbench.editor.revealIfOpen": false,

  // Controls if opened editors should show with an icon or not. This requires an icon theme to be enabled as well.
  "workbench.editor.showIcons": true,

  // Controls if opened editors should show in tabs or not.
  "workbench.editor.showTabs": true,

  // Controls the position of the editor's tabs close buttons or disables them when set to 'off'.
  "workbench.editor.tabCloseButton": "right",

  // Controls the sizing of editor tabs. Set to 'fit' to keep tabs always large enough to show the full editor label. Set to 'shrink' to allow tabs to get smaller when the available space is not enough to show all tabs at once.
  "workbench.editor.tabSizing": "fit",

  // Specifies the icon theme used in the workbench or 'null' to not show any file icons.
  "workbench.iconTheme": "vs-seti",

  // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on macOS. The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
  "workbench.list.multiSelectModifier": "ctrlCmd",

  // Controls how to open items in trees and lists using the mouse (if supported). Set to `singleClick` to open items with a single mouse click and `doubleClick` to only open via mouse double click. For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. 
  "workbench.list.openMode": "singleClick",

  // Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom or on the right of the workbench.
  "workbench.panel.defaultLocation": "bottom",

  // Controls if Quick Open should close automatically once it loses focus.
  "workbench.quickOpen.closeOnFocusLost": true,

  // Controls whether to enable the natural language search mode for settings.
  "workbench.settings.enableNaturalLanguageSearch": true,

  // Controls if opening settings also opens an editor showing all default settings.
  "workbench.settings.openDefaultSettings": true,

  // Controls the behavior of the settings editor Table of Contents while searching.
  "workbench.settings.settingsSearchTocBehavior": "hide",

  // Controls whether the settings editor Table of Contents is visible.
  "workbench.settings.tocVisible": true,

  // Controls the location of the sidebar. It can either show on the left or right of the workbench.
  "workbench.sideBar.location": "left",

  // Controls which editor is shown at startup, if none is restored from the previous session. Select 'none' to start without an editor, 'welcomePage' to open the Welcome page (default), 'newUntitledFile' to open a new untitled file (only opening an empty workspace).
  "workbench.startupEditor": "welcomePage",

  // Controls the visibility of the Twitter feedback (smiley) in the status bar at the bottom of the workbench.
  "workbench.statusBar.feedback.visible": true,

  // Controls the visibility of the status bar at the bottom of the workbench.
  "workbench.statusBar.visible": true,

  // When enabled, will show the watermark tips when no editor is open.
  "workbench.tips.enabled": true,

  // Controls whether trees support horizontal scrolling in the workbench.
  "workbench.tree.horizontalScrolling": false,

  // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
  "workbench.view.alwaysShowHeaderActions": false

}
,
{


  // If enabled, will automatically change to high contrast theme if Windows is using a high contrast theme, and to dark theme when switching away from a Windows high contrast theme.
  "window.autoDetectHighContrast": true,

  // Controls if closing the last editor should also close the window. This setting only applies for windows that do not show folders.
  "window.closeWhenEmpty": false,

  // If enabled, the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.
  "window.enableMenuBarMnemonics": true,

  // Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. By default, the menu bar will be visible, unless the window is full screen.
  "window.menuBarVisibility": "default",

  // Controls the dimensions of opening a new window when at least one window is already opened. By default, a new window will open in the center of the screen with small dimensions. When set to 'inherit', the window will get the same dimensions as the last window that was active. When set to 'maximized', the window will open maximized and fullscreen if configured to 'fullscreen'. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
  "window.newWindowDimensions": "default",

  // Controls if files should open in a new window.
  // - default: files will open in a new window unless picked from within the application (e.g. via the File menu)
  // - on: files will open in a new window
  // - off: files will open in the window with the files' folder open or the last active window
  // Note that there can still be cases where this setting is ignored (e.g. when using the -new-window or -reuse-window command line option).
  "window.openFilesInNewWindow": "off",

  // Controls if folders should open in a new window or replace the last active window.
  // - default: folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu)
  // - on: folders will open in a new window
  // - off: folders will replace the last active window
  // Note that there can still be cases where this setting is ignored (e.g. when using the -new-window or -reuse-window command line option).
  "window.openFoldersInNewWindow": "default",

  // Controls if a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
  // - on: open a new empty window
  // - off: the last active running instance will get focus
  // Note that there can still be cases where this setting is ignored (e.g. when using the -new-window or -reuse-window command line option).
  "window.openWithoutArgumentsInNewWindow": "on",

  // Controls if a window should restore to full screen mode if it was exited in full screen mode.
  "window.restoreFullscreen": false,

  // Controls how windows are being reopened after a restart. Select 'none' to always start with an empty workspace, 'one' to reopen the last window you worked on, 'folders' to reopen all windows that had folders opened or 'all' to reopen all windows of your last session.
  "window.restoreWindows": "one",

  // Enable this workaround if scrolling is no longer smooth after restoring a minimized VS Code window. This is a workaround for an issue (https://github.com/Microsoft/vscode/issues/13612) where scrolling starts to lag on devices with precision trackpads like the Surface devices from Microsoft. Enabling this workaround can result in a little bit of layout flickering after restoring the window from minimized state but is otherwise harmless.
  "window.smoothScrollingWorkaround": false,

  // Controls the window title based on the active editor. Variables are substituted based on the context:
  // ${activeEditorShort}: the file name (e.g. myFile.txt)
  // ${activeEditorMedium}: the path of the file relative to the workspace folder (e.g. myFolder/myFile.txt)
  // ${activeEditorLong}: the full path of the file (e.g. /Users/Development/myProject/myFolder/myFile.txt)
  // ${folderName}: name of the workspace folder the file is contained in (e.g. myFolder)
  // ${folderPath}: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder)
  // ${rootName}: name of the workspace (e.g. myFolder or myWorkspace)
  // ${rootPath}: file path of the workspace (e.g. /Users/Development/myWorkspace)
  // ${appName}: e.g. VS Code
  // ${dirty}: a dirty indicator if the active editor is dirty
  // ${separator}: a conditional separator (" - ") that only shows when surrounded by variables with values or static text
  "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

  // Adjust the appearance of the window title bar. Changes require a full restart to apply.
  "window.titleBarStyle": "native",

  // Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
  "window.zoomLevel": 0

}
,
{


  // Configure file associations to languages (e.g. "*.extension": "html"). These have precedence over the default associations of the languages installed.
  "files.associations": {},

  // When enabled, will attempt to guess the character set encoding when opening files. This setting can be configured per language too.
  "files.autoGuessEncoding": false,

  // Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.
  "files.autoSave": "off",

  // Controls the delay in ms after which a dirty file is saved automatically. Only applies when 'files.autoSave' is set to 'afterDelay'
  "files.autoSaveDelay": 1000,

  // The default language mode that is assigned to new files.
  "files.defaultLanguage": "",

  // The default character set encoding to use when reading and writing files. This setting can be configured per language too.
  "files.encoding": "utf8",

  // The default end of line character. Use \n for LF and \r\n for CRLF.
  "files.eol": "\r\n",

  // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true
  },

  // Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
  "files.hotExit": "onExit",

  // When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": false,

  // Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying --max-memory=NEWSIZE on the command line.
  "files.maxMemoryForLargeFilesMB": 4096,

  // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
  "files.trimFinalNewlines": false,

  // When enabled, will trim trailing whitespace when saving a file.
  "files.trimTrailingWhitespace": false,

  // Use the new experimental file watcher.
  "files.useExperimentalFileWatcher": false,

  // Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true
  }

}
,
{


  // Controls if turning on Zen Mode also centers the layout.
  "zenMode.centerLayout": true,

  // Controls if turning on Zen Mode also puts the workbench into full screen mode.
  "zenMode.fullScreen": true,

  // Controls if turning on Zen Mode also hides the activity bar at the left of the workbench.
  "zenMode.hideActivityBar": true,

  // Controls if turning on Zen Mode also hides the status bar at the bottom of the workbench.
  "zenMode.hideStatusBar": true,

  // Controls if turning on Zen Mode also hides workbench tabs.
  "zenMode.hideTabs": true,

  // Controls if a window should restore to zen mode if it was exited in zen mode.
  "zenMode.restore": false

}
,
{


  // Controls if the explorer should automatically reveal and select files when opening them.
  "explorer.autoReveal": true,

  // Controls if the explorer should ask for confirmation when deleting a file via the trash.
  "explorer.confirmDelete": true,

  // Controls if the explorer should ask for confirmation to move files and folders via drag and drop.
  "explorer.confirmDragAndDrop": true,

  // Controls if file decorations should use badges.
  "explorer.decorations.badges": true,

  // Controls if file decorations should use colors.
  "explorer.decorations.colors": true,

  // Controls if the explorer should allow to move files and folders via drag and drop.
  "explorer.enableDragAndDrop": true,

  // Number of editors shown in the Open Editors pane.
  "explorer.openEditors.visible": 9,

  // Controls sorting order of files and folders in the explorer. In addition to the default sorting, you can set the order to 'mixed' (files and folders sorted combined), 'type' (by file type), 'modified' (by last modified date) or 'filesFirst' (sort files before folders).
  "explorer.sortOrder": "default"

}
,
{


  // Configure glob patterns for excluding files and folders in searches. Inherits all glob patterns from the files.exclude setting.
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },

  // Controls whether to follow symlinks while searching.
  "search.followSymlinks": true,

  // Controls if the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
  "search.location": "sidebar",

  // Configure to include results from a global symbol search in the file results for Quick Open.
  "search.quickOpen.includeSymbols": false,

  // Searches case-insensitively if the pattern is all lowercase, otherwise, searches case-sensitively
  "search.smartCase": false,

  // Controls whether to use .gitignore and .ignore files when searching for files.
  "search.useIgnoreFiles": true,

  // Controls whether to use ripgrep in text and file search
  "search.useRipgrep": true

}
,
{


  // The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables
  "http.proxy": "",

  // The value to send as the 'Proxy-Authorization' header for every network request.
  "http.proxyAuthorization": null,

  // Whether the proxy server certificate should be verified against the list of supplied CAs.
  "http.proxyStrictSSL": true

}
,
{


  // Configure whether you receive automatic updates from an update channel. Requires a restart after change.
  "update.channel": "default",

  // Enables Windows background updates.
  "update.enableWindowsBackgroundUpdates": true,

  // Show Release Notes after an update.
  "update.showReleaseNotes": true

}
,
{


  // Allows setting breakpoint in any file
  "debug.allowBreakpointsEverywhere": false,

  // Controls if the non debug hovers should be enabled while debugging. If true the hover providers will be called to provide a hover. Regular hovers will not be shown even if this setting is true.
  "debug.enableAllHovers": false,

  // Show variable values inline in editor while debugging
  "debug.inlineValues": false,

  // Controls behavior of the internal debug console.
  "debug.internalConsoleOptions": "openOnFirstSessionStart",

  // Controls whether debug view should be open on debugging session start.
  "debug.openDebug": "openOnFirstSessionStart",

  // Automatically open explorer view on the end of a debug session
  "debug.openExplorerOnEnd": false,

  // Controls when the debug status bar should be visible
  "debug.showInStatusBar": "onFirstSessionStart",

  // Controls the location of the debug toolbar. Either "floating" in all views, "docked" in the debug view, or "hidden"
  "debug.toolBarLocation": "floating",

  // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces
  "launch": {
    "configurations": [],
    "compounds": []
  }

}
,
{


  // Enable/disable autoclosing of HTML tags.
  "html.autoClosingTags": true,

  // List of tags, comma separated, where the content shouldn't be reformatted. 'null' defaults to the 'pre' tag.
  "html.format.contentUnformatted": "pre,code,textarea",

  // Enable/disable default HTML formatter
  "html.format.enable": true,

  // End with a newline.
  "html.format.endWithNewline": false,

  // List of tags, comma separated, that should have an extra newline before them. 'null' defaults to "head, body, /html".
  "html.format.extraLiners": "head, body, /html",

  // Format and indent {{#foo}} and {{/foo}}.
  "html.format.indentHandlebars": false,

  // Indent <head> and <body> sections.
  "html.format.indentInnerHtml": false,

  // Maximum number of line breaks to be preserved in one chunk. Use 'null' for unlimited.
  "html.format.maxPreserveNewLines": null,

  // Whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
  "html.format.preserveNewLines": true,

  // List of tags, comma separated, that shouldn't be reformatted. 'null' defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
  "html.format.unformatted": "wbr",

  // Wrap attributes.
  "html.format.wrapAttributes": "auto",

  // Maximum amount of characters per line (0 = disable).
  "html.format.wrapLineLength": 120,

  // Configures if the built-in HTML language support suggests Angular V1 tags and properties.
  "html.suggest.angular1": true,

  // Configures if the built-in HTML language support suggests HTML5 tags, properties and values.
  "html.suggest.html5": true,

  // Configures if the built-in HTML language support suggests Ionic tags, properties and values.
  "html.suggest.ionic": true,

  // Traces the communication between VS Code and the HTML language server.
  "html.trace.server": "off",

  // Configures if the built-in HTML language support validates embedded scripts.
  "html.validate.scripts": true,

  // Configures if the built-in HTML language support validates embedded styles.
  "html.validate.styles": true

}
,
{


  // Enable/disable default JSON formatter (requires restart)
  "json.format.enable": true,

  // Associate schemas to JSON files in the current project
  "json.schemas": [],

  // Traces the communication between VS Code and the JSON language server.
  "json.trace.server": "off"

}
,
{


  // Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for every newline.
  "markdown.preview.breaks": false,

  // Double click in the markdown preview to switch to the editor.
  "markdown.preview.doubleClickToSwitchToEditor": true,

  // Controls the font family used in the markdown preview.
  "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'HelveticaNeue-Light', 'Ubuntu', 'Droid Sans', sans-serif",

  // Controls the font size in pixels used in the markdown preview.
  "markdown.preview.fontSize": 14,

  // Controls the line height used in the markdown preview. This number is relative to the font size.
  "markdown.preview.lineHeight": 1.6,

  // Enable or disable conversion of URL-like text to links in the markdown preview.
  "markdown.preview.linkify": true,

  // Mark the current editor selection in the markdown preview.
  "markdown.preview.markEditorSelection": true,

  // When a markdown preview is scrolled, update the view of the editor.
  "markdown.preview.scrollEditorWithPreview": true,

  // When a markdown editor is scrolled, update the view of the preview.
  "markdown.preview.scrollPreviewWithEditor": true,

  // Sets how YAML front matter should be rendered in the markdown preview. 'hide' removes the front matter. Otherwise, the front matter is treated as markdown content.
  "markdown.previewFrontMatter": "hide",

  // A list of URLs or local paths to CSS style sheets to use from the markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the markdown file. All '\' need to be written as '\\'.
  "markdown.styles": [],

  // Enable debug logging for the markdown extension.
  "markdown.trace": "off"

}
,
{


  // Configures if the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
  "php.suggest.basic": true,

  // Enable/disable built-in PHP validation.
  "php.validate.enable": true,

  // Points to the PHP executable.
  "php.validate.executablePath": null,

  // Whether the linter is run on save or on type.
  "php.validate.run": "onSave"

}
,
{


  // Enable/disable default JavaScript formatter.
  "javascript.format.enable": true,

  // Defines space handling after a comma delimiter.
  "javascript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.
  "javascript.format.insertSpaceAfterConstructor": false,

  // Defines space handling after function keyword for anonymous functions.
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling after keywords in a control flow statement.
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after opening and before closing JSX expression braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing non-empty brackets.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non-empty parenthesis.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing template string braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  //  Defines space handling after a semicolon in a for statement.
  "javascript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after a binary operator.
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling before function argument parentheses.
  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.
  "javascript.implicitProjectConfig.checkJs": false,

  // Enable/disable 'experimentalDecorators' for JavaScript files that are not part of a project. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.
  "javascript.implicitProjectConfig.experimentalDecorators": false,

  // Enable/disable including unique names from the file in JavaScript suggestion lists.
  "javascript.nameSuggestions": true,

  // Preferred path style for auto imports:
  // - "relative" to the file location.
  // - "non-relative" based on the 'baseUrl' configured in your 'jsconfig.json' / 'tsconfig.json'.
  // - "auto" infer the shortest path type.
  // Requires using TypeScript 2.9 or newer in the workspace.
  "javascript.preferences.importModuleSpecifier": "auto",

  // Preferred quote style to use for quick fixes: 'single' quotes, 'double' quotes, or 'auto' infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.
  "javascript.preferences.quoteStyle": "auto",

  // Enable/disable references CodeLens in JavaScript files.
  "javascript.referencesCodeLens.enabled": false,

  // Enable/disable highlighting of unused variables in code. Requires using TypeScript 2.9 or newer in the workspace.
  "javascript.showUnused": true,

  // Enable/disable suggestion diagnostics for JavaScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.
  "javascript.suggestionActions.enabled": true,

  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Possible values are: 'prompt' on each rename, 'always' update paths automatically, and 'never' rename paths and don't prompt me. Requires using TypeScript 2.9 or newer in the workspace.
  "javascript.updateImportsOnFileMove.enabled": "prompt",

  // Enable/disable JavaScript validation.
  "javascript.validate.enable": true,

  // Enable/disable auto JSDoc comments
  "jsDocCompletion.enabled": true,

  // Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.
  "typescript.autoImportSuggestions.enabled": true,

  // Check if NPM is installed for Automatic Type Acquisition.
  "typescript.check.npmIsInstalled": true,

  // Disables automatic type acquisition.
  "typescript.disableAutomaticTypeAcquisition": false,

  // Enable/disable default TypeScript formatter.
  "typescript.format.enable": true,

  // Defines space handling after a comma delimiter.
  "typescript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.
  "typescript.format.insertSpaceAfterConstructor": false,

  // Defines space handling after function keyword for anonymous functions.
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling after keywords in a control flow statement.
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after opening and before closing JSX expression braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing non-empty brackets.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non-empty parenthesis.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing template string braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  //  Defines space handling after a semicolon in a for statement.
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after type assertions in TypeScript. Requires using TypeScript 2.4 or newer in the workspace.
  "typescript.format.insertSpaceAfterTypeAssertion": false,

  // Defines space handling after a binary operator.
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling before function argument parentheses.
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Enable/disable implementations CodeLens.
  "typescript.implementationsCodeLens.enabled": false,

  // Sets the locale used to report JavaScript and TypeScript errors. Requires using TypeScript 2.6.0 or newer in the workspace. Default of 'null' uses VS Code's locale.
  "typescript.locale": null,

  // Specifies the path to the NPM executable used for Automatic Type Acquisition. Requires using TypeScript 2.3.4 or newer in the workspace.
  "typescript.npm": null,

  // Preferred path style for auto imports:
  // - "relative" to the file location.
  // - "non-relative" based on the 'baseUrl' configured in your 'jsconfig.json' / 'tsconfig.json'.
  // - "auto" infer the shortest path type.
  // Requires using TypeScript 2.9 or newer in the workspace.
  "typescript.preferences.importModuleSpecifier": "auto",

  // Preferred quote style to use for quick fixes: 'single' quotes, 'double' quotes, or 'auto' infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.
  "typescript.preferences.quoteStyle": "auto",

  // Enable/disable quick suggestions when typing out an import path.
  "typescript.quickSuggestionsForPaths": true,

  // Enable/disable references CodeLens in TypeScript files.
  "typescript.referencesCodeLens.enabled": false,

  // Report style checks as warnings
  "typescript.reportStyleChecksAsWarnings": true,

  // Enable/disable highlighting of unused variables in code. Requires using TypeScript 2.9 or newer in the workspace.
  "typescript.showUnused": true,

  // Enable/disable suggestion diagnostics for TypeScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.
  "typescript.suggestionActions.enabled": true,

  // Controls auto detection of tsc tasks. 'off' disables this feature. 'build' only creates single run compile tasks. 'watch' only creates compile and watch tasks. 'on' creates both build and watch tasks. Default is 'on'.
  "typescript.tsc.autoDetect": "on",

  // Specifies the folder path containing the tsserver and lib*.d.ts files to use.
  "typescript.tsdk": null,

  // Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.log": "off",

  // Additional paths to discover Typescript Language Service plugins. Requires using TypeScript 2.3.0 or newer in the workspace.
  "typescript.tsserver.pluginPaths": [],

  // Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.trace": "off",

  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Possible values are: 'prompt' on each rename, 'always' update paths automatically, and 'never' rename paths and don't prompt me. Requires using TypeScript 2.9 or newer in the workspace.
  "typescript.updateImportsOnFileMove.enabled": "prompt",

  // Complete functions with their parameter signature.
  "typescript.useCodeSnippetsOnMethodSuggest": false,

  // Enable/disable TypeScript validation.
  "typescript.validate.enable": true

}
,
{


  // Invalid number of parameters
  "css.lint.argumentsInColorFunction": "error",

  // Do not use width or height when using padding or border
  "css.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties
  "css.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions
  "css.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets
  "css.lint.emptyRules": "warning",

  // Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "css.lint.float": "ignore",

  // @font-face rule must define 'src' and 'font-family' properties
  "css.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers
  "css.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "css.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older
  "css.lint.ieHack": "ignore",

  // Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "css.lint.important": "ignore",

  // Import statements do not load in parallel
  "css.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect
  "css.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (*) is known to be slow
  "css.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "css.lint.unknownAtRules": "warning",

  // Unknown property.
  "css.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "css.lint.unknownVendorSpecificProperties": "ignore",

  // When using a vendor-specific prefix also include the standard property
  "css.lint.vendorPrefix": "warning",

  // No unit for zero needed
  "css.lint.zeroUnits": "ignore",

  // Traces the communication between VS Code and the CSS language server.
  "css.trace.server": "off",

  // Enables or disables all validations
  "css.validate": true

}
,
{


  // Invalid number of parameters
  "less.lint.argumentsInColorFunction": "error",

  // Do not use width or height when using padding or border
  "less.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties
  "less.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions
  "less.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets
  "less.lint.emptyRules": "warning",

  // Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "less.lint.float": "ignore",

  // @font-face rule must define 'src' and 'font-family' properties
  "less.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers
  "less.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "less.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older
  "less.lint.ieHack": "ignore",

  // Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "less.lint.important": "ignore",

  // Import statements do not load in parallel
  "less.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect
  "less.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (*) is known to be slow
  "less.lint.universalSelector": "ignore",

  // Unknown property.
  "less.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "less.lint.unknownVendorSpecificProperties": "ignore",

  // When using a vendor-specific prefix also include the standard property
  "less.lint.vendorPrefix": "warning",

  // No unit for zero needed
  "less.lint.zeroUnits": "ignore",

  // Enables or disables all validations
  "less.validate": true

}
,
{


  // Invalid number of parameters
  "scss.lint.argumentsInColorFunction": "error",

  // Do not use width or height when using padding or border
  "scss.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties
  "scss.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions
  "scss.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets
  "scss.lint.emptyRules": "warning",

  // Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "scss.lint.float": "ignore",

  // @font-face rule must define 'src' and 'font-family' properties
  "scss.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers
  "scss.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "scss.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older
  "scss.lint.ieHack": "ignore",

  // Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "scss.lint.important": "ignore",

  // Import statements do not load in parallel
  "scss.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect
  "scss.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (*) is known to be slow
  "scss.lint.universalSelector": "ignore",

  // Unknown property.
  "scss.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "scss.lint.unknownVendorSpecificProperties": "ignore",

  // When using a vendor-specific prefix also include the standard property
  "scss.lint.vendorPrefix": "warning",

  // No unit for zero needed
  "scss.lint.zeroUnits": "ignore",

  // Enables or disables all validations
  "scss.validate": true

}
,
{


  // Automatically update extensions
  "extensions.autoUpdate": true,

  // If set to true, editors with extension details will be automatically closed upon navigating away from the Extensions View.
  "extensions.closeExtensionDetailsOnViewChange": false,

  // If set to true, the notifications for extension recommendations will stop showing up.
  "extensions.ignoreRecommendations": false,

  // If set to true, recommendations will not be fetched or shown unless specifically requested by the user.
  "extensions.showRecommendationsOnlyOnDemand": false

}
,
{


  // Customizes what kind of terminal to launch.
  "terminal.explorerKind": "integrated",

  // Customizes which terminal to run on Linux.
  "terminal.external.linuxExec": "xterm",

  // Customizes which terminal application to run on OS X.
  "terminal.external.osxExec": "Terminal.app",

  // Customizes which terminal to run on Windows.
  "terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe"

}
,
{


  // A set of command IDs whose keybindings will not be sent to the shell and instead always be handled by Code. This allows the use of keybindings that would normally be consumed by the shell to act the same as when the terminal is not focused, for example ctrl+p to launch Quick Open.
  "terminal.integrated.commandsToSkipShell": [
    "editor.action.toggleTabFocusMode",
    "workbench.action.debug.continue",
    "workbench.action.debug.pause",
    "workbench.action.debug.restart",
    "workbench.action.debug.run",
    "workbench.action.debug.start",
    "workbench.action.debug.stepInto",
    "workbench.action.debug.stepOut",
    "workbench.action.debug.stepOver",
    "workbench.action.debug.stop",
    "workbench.action.firstEditorInGroup",
    "workbench.action.focusActiveEditorGroup",
    "workbench.action.focusEighthEditorGroup",
    "workbench.action.focusFifthEditorGroup",
    "workbench.action.focusFirstEditorGroup",
    "workbench.action.focusFourthEditorGroup",
    "workbench.action.focusLastEditorGroup",
    "workbench.action.focusSecondEditorGroup",
    "workbench.action.focusSeventhEditorGroup",
    "workbench.action.focusSixthEditorGroup",
    "workbench.action.focusThirdEditorGroup",
    "workbench.action.lastEditorInGroup",
    "workbench.action.navigateDown",
    "workbench.action.navigateLeft",
    "workbench.action.navigateRight",
    "workbench.action.navigateUp",
    "workbench.action.openNextRecentlyUsedEditorInGroup",
    "workbench.action.openPreviousRecentlyUsedEditorInGroup",
    "workbench.action.quickOpen",
    "workbench.action.quickOpenPreviousEditor",
    "workbench.action.quickOpenView",
    "workbench.action.showCommands",
    "workbench.action.tasks.build",
    "workbench.action.tasks.restartTask",
    "workbench.action.tasks.runTask",
    "workbench.action.tasks.showLog",
    "workbench.action.tasks.showTasks",
    "workbench.action.tasks.terminate",
    "workbench.action.tasks.test",
    "workbench.action.terminal.clear",
    "workbench.action.terminal.clearSelection",
    "workbench.action.terminal.copySelection",
    "workbench.action.terminal.deleteWordLeft",
    "workbench.action.terminal.deleteWordRight",
    "workbench.action.terminal.focus",
    "workbench.action.terminal.focusAtIndex1",
    "workbench.action.terminal.focusAtIndex2",
    "workbench.action.terminal.focusAtIndex3",
    "workbench.action.terminal.focusAtIndex4",
    "workbench.action.terminal.focusAtIndex5",
    "workbench.action.terminal.focusAtIndex6",
    "workbench.action.terminal.focusAtIndex7",
    "workbench.action.terminal.focusAtIndex8",
    "workbench.action.terminal.focusAtIndex9",
    "workbench.action.terminal.focusFindWidget",
    "workbench.action.terminal.focusNext",
    "workbench.action.terminal.focusNextPane",
    "workbench.action.terminal.focusPrevious",
    "workbench.action.terminal.focusPreviousPane",
    "workbench.action.terminal.hideFindWidget",
    "workbench.action.terminal.kill",
    "workbench.action.terminal.moveToLineEnd",
    "workbench.action.terminal.moveToLineStart",
    "workbench.action.terminal.new",
    "workbench.action.terminal.newInActiveWorkspace",
    "workbench.action.terminal.paste",
    "workbench.action.terminal.resizePaneDown",
    "workbench.action.terminal.resizePaneLeft",
    "workbench.action.terminal.resizePaneRight",
    "workbench.action.terminal.resizePaneUp",
    "workbench.action.terminal.runActiveFile",
    "workbench.action.terminal.runSelectedText",
    "workbench.action.terminal.scrollDown",
    "workbench.action.terminal.scrollDownPage",
    "workbench.action.terminal.scrollToBottom",
    "workbench.action.terminal.scrollToNextCommand",
    "workbench.action.terminal.scrollToPreviousCommand",
    "workbench.action.terminal.scrollToTop",
    "workbench.action.terminal.scrollUp",
    "workbench.action.terminal.scrollUpPage",
    "workbench.action.terminal.selectAll",
    "workbench.action.terminal.selectToNextCommand",
    "workbench.action.terminal.selectToNextLine",
    "workbench.action.terminal.selectToPreviousCommand",
    "workbench.action.terminal.selectToPreviousLine",
    "workbench.action.terminal.split",
    "workbench.action.terminal.splitInActiveWorkspace",
    "workbench.action.terminal.toggleTerminal",
    "workbench.action.togglePanel"
  ],

  // Whether to confirm on exit if there are active terminal sessions.
  "terminal.integrated.confirmOnExit": false,

  // When set, text selected in the terminal will be copied to the clipboard.
  "terminal.integrated.copyOnSelection": false,

  // Controls whether the terminal cursor blinks.
  "terminal.integrated.cursorBlinking": false,

  // Controls the style of terminal cursor.
  "terminal.integrated.cursorStyle": "block",

  // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
  "terminal.integrated.cwd": "",

  // When set, bold text in the terminal will always use the "bright" ANSI color variant.
  "terminal.integrated.drawBoldTextInBrightColors": true,

  // Whether the terminal bell is enabled or not.
  "terminal.integrated.enableBell": false,

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux
  "terminal.integrated.env.linux": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on OS X
  "terminal.integrated.env.osx": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows
  "terminal.integrated.env.windows": {},

  // Whether to restore terminal sessions for the workspace automatically when launching VS Code. This is an experimental setting; it may be buggy and could change in the future.
  "terminal.integrated.experimentalRestore": false,

  // Controls how the terminal stores glyph textures. `static` is the default and uses a fixed texture to draw the characters from. `dynamic` will draw the characters to the texture as they are needed, this should boost overall performance at the cost of slightly increased draw time the first time a character is drawn. `dynamic` will eventually become the default and this setting will be removed. Changes to this setting will only apply to new terminals.
  "terminal.integrated.experimentalTextureCachingStrategy": "static",

  // Controls the font family of the terminal, this defaults to editor.fontFamily's value.
  "terminal.integrated.fontFamily": "",

  // Controls the font size in pixels of the terminal.
  "terminal.integrated.fontSize": 14,

  // The font weight to use within the terminal for non-bold text.
  "terminal.integrated.fontWeight": "normal",

  // The font weight to use within the terminal for bold text.
  "terminal.integrated.fontWeightBold": "bold",

  // Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
  "terminal.integrated.letterSpacing": 0,

  // Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
  "terminal.integrated.lineHeight": 1,

  // Treat the option key as the meta key in the terminal on macOS.
  "terminal.integrated.macOptionIsMeta": false,

  // Controls how the terminal is rendered, the options are "canvas" for the standard (fast) canvas renderer, "dom" for the fallback DOM-based renderer or "auto" which lets VS Code guess which will be best. This setting needs VS Code to reload in order to take effect.
  "terminal.integrated.rendererType": "auto",

  // Controls how terminal reacts to right click, possibilities are "default", "copyPaste", and "selectWord". "default" will show the context menu, "copyPaste" will copy when there is a selection otherwise paste, "selectWord" will select the word under the cursor and show the context menu.
  "terminal.integrated.rightClickBehavior": "copyPaste",

  // Controls the maximum amount of lines the terminal keeps in its buffer.
  "terminal.integrated.scrollback": 1000,

  // Controls whether locale variables are set at startup of the terminal, this defaults to true on OS X, false on other platforms.
  "terminal.integrated.setLocaleVariables": false,

  // The path of the shell that the terminal uses on Linux.
  "terminal.integrated.shell.linux": "sh",

  // The path of the shell that the terminal uses on OS X.
  "terminal.integrated.shell.osx": "sh",

  // The path of the shell that the terminal uses on Windows. When using shells shipped with Windows (cmd, PowerShell or Bash on Ubuntu).
  "terminal.integrated.shell.windows": "C:\\Windows\\system32\\cmd.exe",

  // The command line arguments to use when on the Linux terminal.
  "terminal.integrated.shellArgs.linux": [],

  // The command line arguments to use when on the OS X terminal.
  "terminal.integrated.shellArgs.osx": [
    "-l"
  ],

  // The command line arguments to use when on the Windows terminal.
  "terminal.integrated.shellArgs.windows": [],

  // Show alert `The terminal process terminated with exit code` when exit code is non-zero.
  "terminal.integrated.showExitAlert": true

}
,
{


  // Controls if Problems view should automatically reveal files when opening them
  "problems.autoReveal": true,

  // Show Errors & Warnings on files and folder.
  "problems.decorations.enabled": true

}
,
{


  // Enable crash reports to be sent to Microsoft.
  // This option requires restart to take effect.
  "telemetry.enableCrashReporter": true,

  // Enable usage data and errors to be sent to Microsoft.
  "telemetry.enableTelemetry": true

}
,
{


  // Render Outline Elements with Icons.
  "outline.icons": true,

  // Use badges for Errors & Warnings.
  "outline.problems.badges": true,

  // Use colors for Errors & Warnings.
  "outline.problems.colors": true,

  // Show Errors & Warnings on Outline Elements.
  "outline.problems.enabled": true

}
,
{


  // An array of languages where Emmet abbreviations should not be expanded.
  "emmet.excludeLanguages": [
    "markdown"
  ],

  // Path to a folder containing Emmet profiles and snippets.'
  "emmet.extensionsPath": null,

  // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.
  //  E.g.: {"vue-html": "html", "javascript": "javascriptreact"}
  "emmet.includeLanguages": {},

  // When set to false, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to true, only the content around the current position in css/scss/less files is parsed.
  "emmet.optimizeStylesheetParsing": true,

  // Preferences used to modify behavior of some actions and resolvers of Emmet.
  "emmet.preferences": {},

  // Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to "never".
  "emmet.showAbbreviationSuggestions": true,

  // Shows expanded Emmet abbreviations as suggestions.
  // The option "inMarkupAndStylesheetFilesOnly" applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
  // The option "always" applies to all parts of the file regardless of markup/css.
  "emmet.showExpandedAbbreviation": "always",

  // If true, then Emmet suggestions will show up as snippets allowing you to order them as per editor.snippetSuggestions setting.
  "emmet.showSuggestionsAsSnippets": false,

  // Define profile for specified syntax or use your own profile with specific rules.
  "emmet.syntaxProfiles": {},

  // When enabled, Emmet abbreviations are expanded when pressing TAB.
  "emmet.triggerExpansionOnTab": false,

  // Variables to be used in Emmet snippets
  "emmet.variables": {}

}
,
{


  // Compiler options for C (e.g. ["-std=c99"])
  "clang.cflags": [],

  // Complete macros
  "clang.completion.completeMacros": true,

  // Enable completion
  "clang.completion.enable": true,

  // Tolerable size of the clang output for completion
  "clang.completion.maxBuffer": 8388608,

  // Trigger completion when the user types one of the characters
  "clang.completion.triggerChars": [
    ".",
    ":",
    ">"
  ],

  // Compiler options for C++ (e.g. ["-std=c++11"])
  "clang.cxxflags": [],

  // The delay after which diagnostic starts (in millisecond)
  "clang.diagnostic.delay": 500,

  // Enable diagnostic
  "clang.diagnostic.enable": true,

  // Tolerable size of the clang output for diagnostic
  "clang.diagnostic.maxBuffer": 262144,

  // Clang command or the path to the Clang executable
  "clang.executable": "clang",

  // Compiler options for Objective-C
  "clang.objcflags": []

}
,
{


  // Configure editor settings to be overridden for [c] language.
  "[c]":  {
    "editor.autoIndent": false
  },

  // Configure editor settings to be overridden for [cpp] language.
  "[cpp]":  {
    "editor.autoIndent": false
  },

  // Configure editor settings to be overridden for [git-commit] language.
  "[git-commit]":  {
    "editor.rulers": [
        72
    ]
  },

  // Configure editor settings to be overridden for [go] language.
  "[go]":  {
    "editor.insertSpaces": false
  },

  // Configure editor settings to be overridden for [json] language.
  "[json]":  {
    "editor.quickSuggestions": {
        "strings": true
    }
  },

  // Configure editor settings to be overridden for [makefile] language.
  "[makefile]":  {
    "editor.insertSpaces": false
  },

  // Configure editor settings to be overridden for [markdown] language.
  "[markdown]":  {
    "editor.wordWrap": "on",
    "editor.quickSuggestions": false
  },

  // Configure editor settings to be overridden for [yaml] language.
  "[yaml]":  {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": false
  }

}
,
{


  // List of suppressed diagnostic messages.
  "python.analysis.disabled": [],

  // List of diagnostics messages to be shown as errors.
  "python.analysis.errors": [],

  // List of diagnostics messages to be shown as information.
  "python.analysis.information": [],

  // Only show errors and warnings for open files rather than for the entire workspace.
  "python.analysis.openFilesOnly": true,

  // Paths to look for typeshed modules.
  "python.analysis.typeshedPaths": [],

  // List of diagnostics messages to be shown as warnings.
  "python.analysis.warnings": [],

  // Automatically add brackets for functions.
  "python.autoComplete.addBrackets": false,

  // List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
  "python.autoComplete.extraPaths": [],

  // Comma delimited list of modules preloaded to speed up Auto Complete (e.g. add Numpy, Pandas, etc, items slow to load when autocompleting).
  "python.autoComplete.preloadModules": [],

  // Controls appearance of methods with double underscores in the completion list.
  "python.autoComplete.showAdvancedMembers": true,

  // Specifies paths to local typeshed repository clone(s) for the Python language server.
  "python.autoComplete.typeshedPaths": [],

  // Whether to check if Python is installed (also warn when using the macOS-installed Python).
  "python.disableInstallationCheck": false,

  // Absolute path to a file containing environment variable definitions.
  "python.envFile": "${workspaceFolder}/.env",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.formatting.autopep8Args": [],

  // Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
  "python.formatting.autopep8Path": "autopep8",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.formatting.blackArgs": [],

  // Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
  "python.formatting.blackPath": "black",

  // Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
  "python.formatting.provider": "autopep8",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.formatting.yapfArgs": [],

  // Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
  "python.formatting.yapfPath": "yapf",

  // Whether to install Python modules globally when not using an environment.
  "python.globalModuleInstallation": false,

  // Enables Jedi as IntelliSense engine instead of Microsoft Python Analysis Engine.
  "python.jediEnabled": true,

  // Memory limit for the Jedi completion engine in megabytes. Zero (default) means 1024 MB. -1 means unlimited (disable memory limit check)
  "python.jediMemoryLimit": 0,

  // Path to directory containing the Jedi library (this path will contain the 'Jedi' sub directory).
  "python.jediPath": "",

  // Whether to lint Python files.
  "python.linting.enabled": true,

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.flake8Args": [],

  // Severity of Flake8 message type 'E'.
  "python.linting.flake8CategorySeverity.E": "Error",

  // Severity of Flake8 message type 'F'.
  "python.linting.flake8CategorySeverity.F": "Error",

  // Severity of Flake8 message type 'W'.
  "python.linting.flake8CategorySeverity.W": "Warning",

  // Whether to lint Python files using flake8
  "python.linting.flake8Enabled": false,

  // Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
  "python.linting.flake8Path": "flake8",

  // Patterns used to exclude files or folders from being linted.
  "python.linting.ignorePatterns": [
    ".vscode/*.py",
    "**/site-packages/**/*.py"
  ],

  // Whether to lint Python files when saved.
  "python.linting.lintOnSave": true,

  // Controls the maximum number of problems produced by the server.
  "python.linting.maxNumberOfProblems": 100,

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.mypyArgs": [
    "--ignore-missing-imports",
    "--follow-imports=silent"
  ],

  // Severity of Mypy message type 'Error'.
  "python.linting.mypyCategorySeverity.error": "Error",

  // Severity of Mypy message type 'Note'.
  "python.linting.mypyCategorySeverity.note": "Information",

  // Whether to lint Python files using mypy.
  "python.linting.mypyEnabled": false,

  // Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
  "python.linting.mypyPath": "mypy",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.pep8Args": [],

  // Severity of Pep8 message type 'E'.
  "python.linting.pep8CategorySeverity.E": "Error",

  // Severity of Pep8 message type 'W'.
  "python.linting.pep8CategorySeverity.W": "Warning",

  // Whether to lint Python files using pep8
  "python.linting.pep8Enabled": false,

  // Path to pep8, you can use a custom version of pep8 by modifying this setting to include the full path.
  "python.linting.pep8Path": "pep8",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.prospectorArgs": [],

  // Whether to lint Python files using prospector.
  "python.linting.prospectorEnabled": false,

  // Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
  "python.linting.prospectorPath": "prospector",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.pydocstyleArgs": [],

  // Whether to lint Python files using pydocstyle
  "python.linting.pydocstyleEnabled": false,

  // Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
  "python.linting.pydocstylePath": "pydocstyle",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.pylamaArgs": [],

  // Whether to lint Python files using pylama.
  "python.linting.pylamaEnabled": false,

  // Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
  "python.linting.pylamaPath": "pylama",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.pylintArgs": [],

  // Severity of Pylint message type 'Convention/C'.
  "python.linting.pylintCategorySeverity.convention": "Information",

  // Severity of Pylint message type 'Error/E'.
  "python.linting.pylintCategorySeverity.error": "Error",

  // Severity of Pylint message type 'Fatal/F'.
  "python.linting.pylintCategorySeverity.fatal": "Error",

  // Severity of Pylint message type 'Refactor/R'.
  "python.linting.pylintCategorySeverity.refactor": "Hint",

  // Severity of Pylint message type 'Warning/W'.
  "python.linting.pylintCategorySeverity.warning": "Warning",

  // Whether to lint Python files using pylint.
  "python.linting.pylintEnabled": true,

  // Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
  "python.linting.pylintPath": "pylint",

  // Whether to run Pylint with minimal set of rules.
  "python.linting.pylintUseMinimalCheckers": true,

  // Path to Python, you can use a custom version of Python by modifying this setting to include the full path.
  "python.pythonPath": "python",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.sortImports.args": [],

  // Path to isort script, default using inner version
  "python.sortImports.path": "",

  // Activate Python Environment in Terminal created using the Extension.
  "python.terminal.activateEnvironment": true,

  // When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
  "python.terminal.executeInFileDir": false,

  // Python launch arguments to use when executing a file in the terminal.
  "python.terminal.launchArgs": [],

  // Whether to enable or disable auto run test discovery when saving a unit test file.
  "python.unitTest.autoTestDiscoverOnSaveEnabled": true,

  // Optional working directory for unit tests.
  "python.unitTest.cwd": null,

  // Port number used for debugging of unittests.
  "python.unitTest.debugPort": 3000,

  // Arguments passed in. Each argument is a separate item in the array.
  "python.unitTest.nosetestArgs": [],

  // Path to nosetests, you can use a custom version of nosetests by modifying this setting to include the full path.
  "python.unitTest.nosetestPath": "nosetests",

  // Whether to enable or disable unit testing using nosetests.
  "python.unitTest.nosetestsEnabled": false,

  // Where to prompt to configure a test framework if potential tests directories are discovered.
  "python.unitTest.promptToConfigure": true,

  // Arguments passed in. Each argument is a separate item in the array.
  "python.unitTest.pyTestArgs": [],

  // Whether to enable or disable unit testing using pytest.
  "python.unitTest.pyTestEnabled": false,

  // Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
  "python.unitTest.pyTestPath": "pytest",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.unitTest.unittestArgs": [
    "-v",
    "-s",
    ".",
    "-p",
    "*test*.py"
  ],

  // Whether to enable or disable unit testing using unittest.
  "python.unitTest.unittestEnabled": false,

  // Use the experimental debugger when debugging unit tests.
  "python.unitTest.useExperimentalDebugger": false,

  // Folders in your home directory to look into for virtual environments.
  "python.venvFolders": [
    "envs",
    ".pyenv",
    ".direnv"
  ],

  // Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
  "python.venvPath": "",

  // Fully qualilified path to the ctags executable (else leave as ctags, assuming it is in current path).
  "python.workspaceSymbols.ctagsPath": "ctags",

  // Set to 'false' to disable Workspace Symbol provider using ctags.
  "python.workspaceSymbols.enabled": true,

  // Pattern used to exclude files and folders from ctags See http://ctags.sourceforge.net/ctags.html.
  "python.workspaceSymbols.exclusionPatterns": [
    "**/site-packages/**"
  ],

  // Whether to re-build the tags file on when changes made to python files are saved.
  "python.workspaceSymbols.rebuildOnFileSave": true,

  // Whether to re-build the tags file on start (defaults to true).
  "python.workspaceSymbols.rebuildOnStart": true,

  // Fully qualified path to tag file (exuberant ctag file), used to provide workspace symbols.
  "python.workspaceSymbols.tagFilePath": "${workspaceFolder}/.vscode/tags"

}
,
{


  // Controls whether auto detection of Jake tasks is on or off. Default is on.
  "jake.autoDetect": "on"

}
,
{


  // Controls whether files are automatically added to files.associations when they are the target of a navigation operation from a C/C++ file.
  "C_Cpp.autoAddFileAssociations": true,

  // Controls the auto-completion provider. "Default" uses the active IntelliSense engine. "Disabled" uses the word-based completion provided by Visual Studio Code.
  "C_Cpp.autocomplete": "Default",

  // Name of the predefined style used as a fallback in case clang-format is invoked with style "file" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use "{key: value, ...}" to set specific parameters, e.g.: "{ BasedOnStyle: LLVM, IndentWidth: 8 }"
  "C_Cpp.clang_format_fallbackStyle": "Visual Studio",

  // The full path of the clang-format executable.
  "C_Cpp.clang_format_path": null,

  // If set, overrides the include sorting behavior determined by the SortIncludes parameter.
  "C_Cpp.clang_format_sortIncludes": null,

  // Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use "file" to load the style from a .clang-format file in the current or parent directory. Use "{key: value, ...}" to set specific parameters, e.g.: "{ BasedOnStyle: LLVM, IndentWidth: 8 }"
  "C_Cpp.clang_format_style": "file",

  // Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
  "C_Cpp.commentContinuationPatterns": [
    "/**"
  ],

  // Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
  "C_Cpp.configurationWarnings": "Enabled",

  // The value to use in a configuration if "browse.databaseFilename" is either not specified or set to "${default}".
  "C_Cpp.default.browse.databaseFilename": null,

  // The value to use in a configuration if "browse.limitSymbolsToIncludedHeaders" is either not specified or set to "${default}".
  "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

  // The value to use in a configuration if "browse.path" is not specified, or the values to insert if "${default}" is present in "browse.path".
  "C_Cpp.default.browse.path": null,

  // The value to use in a configuration if "compileCommands" is either not specified, or set to "${default}".
  "C_Cpp.default.compileCommands": null,

  // The value to use in a configuration if "compilerPath" is either not specified or set to "${default}".
  "C_Cpp.default.compilerPath": null,

  // The value to use in a configuration if "configurationProvider" is either not specified or set to "${default}".
  "C_Cpp.default.configurationProvider": null,

  // The value to use in a configuration if "cppStandard" is either not specified or set to "${default}".
  "C_Cpp.default.cppStandard": null,

  // The value to use in a configuration if "cStandard" is either not specified or set to "${default}".
  "C_Cpp.default.cStandard": null,

  // The value to use in a configuration if "defines" is not specified, or the values to insert if "${default}" is present in "defines".
  "C_Cpp.default.defines": null,

  // The value to use in a configuration if "forcedInclude" is not specified, or the values to insert if "${default}" is present in "forcedInclude".
  "C_Cpp.default.forcedInclude": null,

  // The value to use in a configuration if "includePath" is not specified, or the values to insert if "${default}" is present in "includePath".
  "C_Cpp.default.includePath": null,

  // The value to use in a configuration if "intelliSenseMode" is either not specified or set to "${default}".
  "C_Cpp.default.intelliSenseMode": null,

  // The value to use in a configuration if "macFrameworkPath" is not specified, or the values to insert if "${default}" is present in "macFrameworkPath".
  "C_Cpp.default.macFrameworkPath": null,

  // The value to use for the system include path. If set, it overrides the system include path acquired via "compilerPath" and "compileCommands" settings.
  "C_Cpp.default.systemIncludePath": null,

  // Version of the Windows SDK include path to use on Windows, e.g. '10.0.17134.0'.
  "C_Cpp.default.windowsSdkVersion": null,

  // Controls whether inactive preprocessor blocks are colored differently than active code. This setting is ignored by the Tag Parser engine.
  "C_Cpp.dimInactiveRegions": true,

  // Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. Warnings about #includes that could not be located will always be reported to the editor. This setting is ignored by the Tag Parser engine.
  "C_Cpp.errorSquiggles": "Enabled",

  // Instructs the extension when to use the "files.exclude" setting when determining which files should be added to the code navigation database while traversing through the paths in the "browse.path" array. "checkFolders" means that the exclusion filters will only be evaluated once per folder (individual files are not checked). "checkFilesAndFolders" means that the exclusion filters will be evaluated against every file and folder encountered. If your "files.exclude" setting only contains folders, then "checkFolders" is the best choice and will increase the speed at which the extension can initialize the code navigation database.
  "C_Cpp.exclusionPolicy": "checkFolders",

  // "Default" enables code formatting. "Disabled" disables code formatting.
  "C_Cpp.formatting": "Default",

  // 
  "C_Cpp.inactiveRegionOpacity": 0.55,

  // Controls the IntelliSense provider. "Tag Parser" provides "fuzzy" results that are not context-aware. "Default" provides context-aware results and is in preview mode - member list, hover tooltips, and error squiggles are currently implemented. Features not yet implemented in the new default engine will use the tag parser engine instead.
  "C_Cpp.intelliSenseEngine": "Default",

  // Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.
  "C_Cpp.intelliSenseEngineFallback": "Enabled",

  // The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information < Debug.
  "C_Cpp.loggingLevel": "Error",

  // Maximum character length of the scope/navigation UI in the status bar. The UI may not appear if this value is too large.
  "C_Cpp.navigation.length": 60,

  // The character used as a path separator for #include auto-completion results.
  "C_Cpp.preferredPathSeparator": "Forward Slash",

  // Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values highest/high/medium/low correspond to approximately 100/75/50/25% CPU usage.
  "C_Cpp.workspaceParsingPriority": "highest"

}
,
{


  // Enable/disable merge conflict block CodeLens within editor
  "merge-conflict.codeLens.enabled": true,

  // Enable/disable merge conflict decorators within editor
  "merge-conflict.decorators.enabled": true

}
,
{


  // Enable/disable default C# formatter (requires restart).
  "csharp.format.enable": true,

  // Specifies whether the references CodeLens should be show be shown.
  "csharp.referencesCodeLens.enabled": true,

  // Suppress the warning that the .NET CLI is not on the path.
  "csharp.suppressDotnetInstallWarning": false,

  // Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved.
  "csharp.suppressDotnetRestoreNotification": false,

  // Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane.
  "csharp.suppressHiddenDiagnostics": true,

  // Suppress the warning that project.json is no longer a supported project format for .NET Core applications
  "csharp.suppressProjectJsonWarning": false,

  // Specifies whether the run and debug test CodeLens should be show be shown.
  "csharp.testsCodeLens.enabled": true,

  // Options to use with the debugger when launching for unit test debugging. Any launch.json option is valid here.
  "csharp.unitTestDebuggingOptions": {},

  // Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command
  "omnisharp.autoStart": true,

  // Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log
  "omnisharp.disableMSBuildDiagnosticWarning": false,

  // Specifies the level of logging output from the OmniSharp server.
  "omnisharp.loggingLevel": "information",

  // The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250).
  "omnisharp.maxProjectResults": 250,

  // Specifies the path to OmniSharp. This can be the absolute path to an OmniSharp executable, a specific version number, or "latest". If a version number or "latest" is specified, the appropriate version of OmniSharp will be downloaded on your behalf.
  "omnisharp.path": null,

  // The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds.
  "omnisharp.projectLoadTimeout": 60,

  // Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size).
  "omnisharp.useEditorFormattingSettings": true,

  // Launch OmniSharp with the globally-installed Mono. If set to "always", "mono" version 5.8.1 or greater must be available on the PATH. If set to "auto", OmniSharp will be launched with "mono" if version 5.8.1 or greater is available on the PATH.
  "omnisharp.useGlobalMono": "auto",

  // Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached.
  "omnisharp.waitForDebugger": false

}
,
{


  // Controls whether auto detection of Grunt tasks is on or off. Default is on.
  "grunt.autoDetect": "on"

}
,
{


  // Enables Application Insights telemetry collection for the Team Services extension.
  "team.appInsights.enabled": true,

  // [Not for TFVC] Specify the team project's build definition Id to monitor when your source code repository is not hosted with Microsoft. Requires both team.remoteUrl and team.teamProject.
  "team.buildDefinitionId": 0,

  // Set the logging level for the extension (error, warn, info, verbose, debug).
  "team.logging.level": "",

  // Specify the account and either the queryText or queryPath of the query you'd like to monitor.  If specified, queryText is preferred over queryPath.
  "team.pinnedQueries": [
    {
      "account": "",
      "queryText": "",
      "queryPath": ""
    }
  ],

  // Specify the number of minutes to wait when polling for new builds and pull requests.
  "team.pollingInterval": 5,

  // [Not for TFVC] Specify the url to a project collection to use when your source code repository is not hosted with Microsoft. Requires team.teamProject.
  "team.remoteUrl": "",

  // Tracks whether the extension should display the Welcome message after the initial installation.
  "team.showWelcomeMessage": true,

  // [Not for TFVC] Specify the team project to use when your source code repository is not hosted with Microsoft. Requires team.remoteUrl.
  "team.teamProject": "",

  // [Required for TFVC] Specify the full path to the TF executable or script to use for TFVC functionality.
  "tfvc.location": "",

  // [Optional for TFVC] Specify the full URL (ex. http://servername:9999/proxy) to the TFS proxy to use for TFVC functionality.
  "tfvc.proxy": "",

  // [Optional for TFVC] Restricts the TFVC workspace to the currently open VS Code workspace.
  "tfvc.restrictWorkspace": false

}
,
{


  // Whether auto fetching is enabled
  "git.autofetch": false,

  // Whether auto refreshing is enabled
  "git.autorefresh": true,

  // Whether repositories should be automatically detected
  "git.autoRepositoryDetection": true,

  // Controls what type of branches are listed when running `Checkout to...`. `all` shows all refs, `local` shows only the local branches, `tags` shows only tags and `remote` shows only remote branches.
  "git.checkoutType": "all",

  // Confirm before synchronizing git repositories
  "git.confirmSync": true,

  // Controls the git badge counter. `all` counts all changes. `tracked` counts only the tracked changes. `off` turns it off.
  "git.countBadge": "all",

  // Controls if Git contributes colors and badges to the explorer and the open editors view.
  "git.decorations.enabled": true,

  // The default location where to clone a git repository
  "git.defaultCloneDirectory": null,

  // Controls whether to automatically detect git submodules.
  "git.detectSubmodules": true,

  // Controls the limit of git submodules detected.
  "git.detectSubmodulesLimit": 10,

  // Enables commit signing with GPG.
  "git.enableCommitSigning": false,

  // Whether git is enabled
  "git.enabled": true,

  // Commit all changes when there are no staged changes.
  "git.enableSmartCommit": false,

  // Ignores the legacy Git warning
  "git.ignoreLegacyWarning": false,

  // Ignores the warning when there are too many changes in a repository
  "git.ignoreLimitWarning": false,

  // Ignores the warning when Git is missing
  "git.ignoreMissingGitWarning": false,

  // Controls when to show commit message input validation.
  "git.inputValidation": "warn",

  // Path to the git executable
  "git.path": null,

  // Controls whether Git should check for unsaved files before committing.
  "git.promptToSaveFilesBeforeCommit": false,

  // Controls whether to show an inline Open File action in the Git changes view.
  "git.showInlineOpenFileAction": true

}
,
{


  // 这项设置会更改深色主题默认的文件图标
  "vsicons.associations.fileDefault.file": null,

  // 这项设置会更改浅色主题默认的文件图标
  "vsicons.associations.fileDefault.file_light": null,

  // 这些自定义设置会覆盖掉系统默认的文件图标设置
  "vsicons.associations.files": [],

  // 这项设置会更改深色主题默认的文件夹图标
  "vsicons.associations.folderDefault.folder": null,

  // 这项设置会更改浅色主题默认的文件夹图标
  "vsicons.associations.folderDefault.folder_light": null,

  // 这项设置会更改默认的根目录文件夹图标
  "vsicons.associations.folderDefault.root_folder": null,

  // 这项设置会更改浅色主题默认的根目录文件夹图标
  "vsicons.associations.folderDefault.root_folder_light": null,

  // 这些自定义设置会覆盖掉系统默认的文件夹图标设置
  "vsicons.associations.folders": [],

  // 指向位于您的计算机上含自定义图标的文件夹的父文件夹的物理路径
  "vsicons.customIconFolderPath": "",

  // 如果设置成 true，手动修改配置后不提醒「重启后生效」
  "vsicons.dontShowConfigManuallyChangedMessage": false,

  // 如果设置成 true，关于新的版本消息将不再显示
  "vsicons.dontShowNewVersionMessage": false,

  // 如果设置成 true，插件会自动匹配 Angular 模式
  "vsicons.presets.angular": false,

  // 如果设置成 true，所有文件夹会恢复成默认图标
  "vsicons.presets.foldersAllDefaultIcon": false,

  // 如果设置成 true，此扩展会隐藏在“资源管理器”中的文件夹箭头
  "vsicons.presets.hideExplorerArrows": false,

  // 如果设置成 true，所有文件夹会隐藏
  "vsicons.presets.hideFolders": false,

  // 如果设置成 true，插件会自动使用官方 JS 图标
  "vsicons.presets.jsOfficial": false,

  // 如果设置成 true，插件会自动使用官方 JSON 图标
  "vsicons.presets.jsonOfficial": false,

  // 如果设置成 true，插件会自动使用官方 TS 图标
  "vsicons.presets.tsOfficial": false,

  // 如果设置成 true，检测工程文件后自动重启插件
  "vsicons.projectDetection.autoReload": false,

  // 如果设置成 true，插件不再自动检测工程文件
  "vsicons.projectDetection.disableDetect": false

}
,
{


  // If there is no solution in the workplace root folder, it will search for solutions in any of these folders.
  "vssolution.altSolutionFolders": [
    "src"
  ],

  // Folder and filenames to ignore when get a dotnet core project content
  "vssolution.netcoreIgnore": [
    "bin",
    "node_modules",
    "obj",
    ".ds_store"
  ],

  // Show the solution explorer in the activity bar, in the explorer pane or don't show it.
  "vssolution.showMode": "explorer",

  // Show the solution explorer output channel.
  "vssolution.showOutputChannel": true,

  // solution-explorer -> Uses the vscode-solution-explorer custom icons
  // mix -> use current theme icons for files and folders
  // current-theme -> Uses the installed icon theme
  "vssolution.solutionExplorerIcons": "solution-explorer",

  // Select the active editor file in the solution explorer.
  "vssolution.trackActiveItem": true,

  // Add space at the end of XML closing tag, ex: " />"
  "vssolution.xmlClosingTagSpace": "false",

  // Spaces to be used for indenting XML output. It could be a number or an string. ex. "2", " " or "\t".
  "vssolution.xmlspaces": "2",

  // Type of XML element to put in the xxproj files.
  "vssolution.xxprojItemTypes": {
    "*": "Content",
    "cs": "Compile",
    "vb": "Compile",
    "fs": "Compile",
    "ts": "TypeScriptCompile"
  }

}
,
{


  // Qiniu AccessKey
  "markdown-preview-enhanced.AccessKey": "",

  // In Markdown, a single newline character doesn't cause a line break in the generated HTML. In GitHub Flavored Markdown, that is not true. Enable this config option to insert line breaks in rendered HTML for single newlines in Markdown source.
  "markdown-preview-enhanced.breakOnSingleNewLine": true,

  // Qiniu Bucket
  "markdown-preview-enhanced.Bucket": "",

  // Code block theme. If `auto.css` is chosen, then the code block theme that best matches the current preview theme will be picked.
  "markdown-preview-enhanced.codeBlockTheme": "auto.css",

  // Qiniu Domain
  "markdown-preview-enhanced.Domain": "http://",

  // Enable CriticMarkup syntax. Only works with markdown-it parser. Please check http://criticmarkup.com/users-guide.php for more information.
  "markdown-preview-enhanced.enableCriticMarkupSyntax": false,

  // Enable emoji & font-awesome plugin. This only works for markdown-it parser, but not pandoc parser.
  "markdown-preview-enhanced.enableEmojiSyntax": true,

  // Enable extended table syntax to support merging table cells.
  "markdown-preview-enhanced.enableExtendedTableSyntax": false,

  // Enables executing code chunks and importing javascript files.
  // ⚠️ Please use this feature with caution because it may put your security at risk! Your machine can get hacked if someone makes you open a markdown with malicious code while script execution is enabled.
  "markdown-preview-enhanced.enableScriptExecution": false,

  // Enable smartypants and other sweet transforms.
  "markdown-preview-enhanced.enableTypographer": false,

  // Enable Wiki Link syntax support. More information can be found at https://help.github.com/articles/adding-links-to-wikis/
  "markdown-preview-enhanced.enableWikiLinkSyntax": true,

  // Front matter rendering option
  "markdown-preview-enhanced.frontMatterRenderingOption": "none",

  // When using Image Helper to copy images, by default images will be copied to root image folder path '/assets'
  "markdown-preview-enhanced.imageFolderPath": "/assets",

  // You can choose different image uploader to upload image
  "markdown-preview-enhanced.imageUploader": "imgur",

  // Default latex engine for Pandoc export and latex code chunk.
  "markdown-preview-enhanced.latexEngine": "pdflatex",

  // Re-render the preview as the contents of the source changes, without requiring the source buffer to be saved. If disabled, the preview is re-rendered only when the buffer is saved to disk.
  "markdown-preview-enhanced.liveUpdate": true,

  // Use customized Math expression block delimiters.
  "markdown-preview-enhanced.mathBlockDelimiters": [
    [
      "$$",
      "$$"
    ],
    [
      "\\[",
      "\\]"
    ]
  ],

  // Use customized Math expression inline delimiters.
  "markdown-preview-enhanced.mathInlineDelimiters": [
    [
      "$",
      "$"
    ],
    [
      "\\(",
      "\\)"
    ]
  ],

  // Choose the Math expression rendering method here. You can also disable math rendering if you want by choosing 'None'.
  "markdown-preview-enhanced.mathRenderingOption": "KaTeX",

  // Mermaid theme, you can choose one from ["mermaid.css", "mermaid.dark.css", "mermaid.forest.css"]
  "markdown-preview-enhanced.mermaidTheme": "mermaid.css",

  // Comma separated pandoc arguments e.g. `--smart, --filter=/bin/exe`. Please use long argument names.
  "markdown-preview-enhanced.pandocArguments": "",

  // The pandoc markdown flavor you want
  "markdown-preview-enhanced.pandocMarkdownFlavor": "markdown-raw_tex+tex_math_single_backslash",

  // Pandoc executable path
  "markdown-preview-enhanced.pandocPath": "pandoc",

  // PhantomJS executable path
  "markdown-preview-enhanced.phantomPath": "phantomjs",

  // Preview Theme
  "markdown-preview-enhanced.previewTheme": "github-light.css",

  // Whether to print background for file export or not. If set to `false`, then `github-light` preview theme will be used. You can also set `print_background` in front-matter for individual files.
  "markdown-preview-enhanced.printBackground": false,

  // Accepted protocols for links.
  "markdown-preview-enhanced.protocolsWhiteList": "http://, https://, atom://, file://, mailto:, tel:",

  // RevealJS Presentation Theme
  "markdown-preview-enhanced.revealjsTheme": "white.css",

  // Automatic scroll sync. This is now partially supported.
  "markdown-preview-enhanced.scrollSync": true,

  // Qiniu SecretKey
  "markdown-preview-enhanced.SecretKey": "",

  // Open Only One Preview
  "markdown-preview-enhanced.singlePreview": true,

  // Enable this option will render markdown by pandoc instead of remarkable.
  "markdown-preview-enhanced.usePandocParser": false,

  // By default, the extension for wikilink is `.md`. For example: [[test]] will direct to file path `test.md`.
  "markdown-preview-enhanced.wikiLinkFileExtension": ".md"

}
,
{


  // Show node pathes of of workspace in the code completion
  "GodotTools.completeNodePath": false,

  // The absolute path of your godot editor
  "GodotTools.editorPath": "",

  // Turn on/off the syntax checking for GDScript
  "GodotTools.enableSyntaxChecking": true,

  // Relate path to the godot project
  "GodotTools.godotProjectRoot": "${workspaceRoot}",

  // The godot version of your project
  "GodotTools.godotVersion": 3,

  // Only parse variables without indents in GDScript
  "GodotTools.ignoreIndentedVars": false,

  // Lint configurations
  "GodotTools.lint": {
    "semicolon": false,
    "conditionBrackets": false,
    "unusedSymbols": true
  },

  // Controls the maximum number of problems produced by the server.
  "GodotTools.maxNumberOfProblems": 100,

  // Parse scene files with extention ends with tscn
  "GodotTools.parseTextScene": true,

  // Render workspace documentations as markdown content
  "GodotTools.workspaceDocumentWithMarkdown": false

}
,
{


  // Open the HLSL Documentation links on the side
  "hlsl.openDocOnSide": true,

  // Configures if the extension HLSL language suggestions are enabled.
  "hlsl.suggest.basic": true

}
,
{


  // Controls whether auto detection of Gulp tasks is on or off. Default is on.
  "gulp.autoDetect": "on"

}
,
{


  // (Experimental) Enable this experimental search provider extension. When enabled, it takes precedence over vscode's built-in search.
  "searchRipgrep.enable": false

}
,
{


  // When reading from stdin, clang-format assumes this filename to look for a style config file (with -style=file) and to determine the language.
  "clang-format.assumeFilename": "",

  // clang-format executable path
  "clang-format.executable": "clang-format",

  // clang-format fallback style.(-fallback-style=value, value can be none, LLVM, Google, Chromium, Mozilla, WebKit)
  "clang-format.fallbackStyle": "LLVM",

  // enable formatting for Apex (requires reloading Visual Studio Code)
  "clang-format.language.apex.enable": true,

  // clang-format fallback style for Apex, left empty to use clang-format.fallbackStyle
  "clang-format.language.apex.fallbackStyle": "",

  // clang-format fallback style for Apex, left empty to use clang-format.style
  "clang-format.language.apex.style": "",

  // enable formatting for C (requires reloading Visual Studio Code)
  "clang-format.language.c.enable": true,

  // clang-format fallback style for C, left empty to use clang-format.fallbackStyle
  "clang-format.language.c.fallbackStyle": "",

  // clang-format fallback style for C, left empty to use clang-format.style
  "clang-format.language.c.style": "",

  // enable formatting for C++ (requires reloading Visual Studio Code)
  "clang-format.language.cpp.enable": true,

  // clang-format fallback style for C++, left empty to use clang-format.fallbackStyle
  "clang-format.language.cpp.fallbackStyle": "",

  // clang-format fallback style for C++, left empty to use clang-format.style
  "clang-format.language.cpp.style": "",

  // enable formatting for GLSL (requires reloading Visual Studio Code)
  "clang-format.language.glsl.enable": true,

  // clang-format fallback style for GLSL, left empty to use clang-format.fallbackStyle
  "clang-format.language.glsl.fallbackStyle": "",

  // clang-format fallback style for GLSL, left empty to use clang-format.style
  "clang-format.language.glsl.style": "",

  // enable formatting for Java (requires reloading Visual Studio Code)
  "clang-format.language.java.enable": true,

  // clang-format fallback style for Java, left empty to use clang-format.fallbackStyle
  "clang-format.language.java.fallbackStyle": "",

  // clang-format fallback style for Java, left empty to use clang-format.style
  "clang-format.language.java.style": "",

  // enable formatting for JavaScript (requires reloading Visual Studio Code)
  "clang-format.language.javascript.enable": true,

  // clang-format fallback style for JavaScript
  "clang-format.language.javascript.fallbackStyle": "google",

  // clang-format fallback style for JavaScript, left empty to use clang-format.style
  "clang-format.language.javascript.style": "",

  // enable formatting for Objective-C (requires reloading Visual Studio Code)
  "clang-format.language.objective-c.enable": true,

  // clang-format fallback style for Objective-C, left empty to use clang-format.fallbackStyle
  "clang-format.language.objective-c.fallbackStyle": "",

  // clang-format fallback style for Objective-C, left empty to use clang-format.style
  "clang-format.language.objective-c.style": "",

  // enable formatting for Objective-C++ (requires reloading Visual Studio Code)
  "clang-format.language.objective-cpp.enable": true,

  // clang-format fallback style for Objective-C++, left empty to use clang-format.fallbackStyle
  "clang-format.language.objective-cpp.fallbackStyle": "",

  // clang-format fallback style for Objective-C++, left empty to use clang-format.style
  "clang-format.language.objective-cpp.style": "",

  // enable formatting for Protobuf (requires reloading Visual Studio Code)
  "clang-format.language.proto.enable": true,

  // clang-format fallback style for Protobuf, left empty to use clang-format.fallbackStyle
  "clang-format.language.proto.fallbackStyle": "",

  // clang-format fallback style for Protobuf, left empty to use clang-format.style
  "clang-format.language.proto.style": "",

  // enable formatting for TypeScript (requires reloading Visual Studio Code)
  "clang-format.language.typescript.enable": true,

  // clang-format fallback style for TypeScript
  "clang-format.language.typescript.fallbackStyle": "google",

  // clang-format fallback style for TypeScript, left empty to use clang-format.style
  "clang-format.language.typescript.style": "",

  // clang-format style.(-style=value, value can be file, LLVM, Google, Chromium, Mozilla, WebKit or json configure)
  "clang-format.style": "file"

}
,
{


  // If 'true', requesting a build while a build is already running will stop and restart the build
  "cmake.autoRestartBuild": false,

  // Additional arguments to pass to CMake when building
  "cmake.buildArgs": [],

  // Build the target before running it.
  "cmake.buildBeforeRun": true,

  // The directory where CMake build files will go
  "cmake.buildDirectory": "${workspaceRoot}/build",

  // Environment variables to pass to CMake during build
  "cmake.buildEnvironment": {},

  // Additional arguments to pass to the underlying build tool when building
  "cmake.buildToolArgs": [],

  // 
  "cmake.cacheInit": null,

  // Clear build output before each build
  "cmake.clearOutputBeforeBuild": true,

  // Name/path of the CMake executable to use
  "cmake.cmakePath": "cmake",

  // Additional arguments to pass to CMake when configuring
  "cmake.configureArgs": [],

  // Environment variables to pass to CMake during configure
  "cmake.configureEnvironment": {},

  // Automatically configure CMake project directories when they are opened
  "cmake.configureOnOpen": null,

  // CMake variables to set on the command line
  "cmake.configureSettings": {},

  // Copy compile_commands.json to this location after a successful configure
  "cmake.copyCompileCommands": null,

  // The number of parallel test jobs. Use zero to use the value of cmake.parallelJobs
  "cmake.ctest.parallelJobs": 0,

  // Arguments to pass to CTest
  "cmake.ctestArgs": [],

  // Path to CTest executable. If null, will be inference from cmake.cmakePath (recommended to leave null)
  "cmake.ctestPath": null,

  // The debug configuration to use when debugging a target
  "cmake.debugConfig": {},

  // 
  "cmake.defaultVariants": {
    "buildType": {
      "default": "debug",
      "description": "The build type",
      "choices": {
        "debug": {
          "short": "Debug",
          "long": "Emit debug information without performing optimizations",
          "buildType": "Debug"
        },
        "release": {
          "short": "Release",
          "long": "Enable optimizations, omit debug info",
          "buildType": "Release"
        },
        "minsize": {
          "short": "MinSizeRel",
          "long": "Optimize for smallest binary size",
          "buildType": "MinSizeRel"
        },
        "reldeb": {
          "short": "RelWithDebInfo",
          "long": "Perform optimizations AND include debugging information",
          "buildType": "RelWithDebInfo"
        }
      }
    }
  },

  // Directories where Emscripten may be installed
  "cmake.emscriptenSearchDirs": [],

  // Output parsers to use. Supported parsers 'cmake', 'gcc', 'gnuld' for GNULD-style inker output, 'msvc' for Microsoft Visual C++, and 'ghs' for the Green Hills compiler with --no_wrap_diagnostics --brief_diagnostics
  "cmake.enabledOutputParsers": [
    "cmake",
    "gcc",
    "gnuld",
    "msvc",
    "ghs"
  ],

  // Enable trace logging to file and console (very noisy)
  "cmake.enableTraceLogging": false,

  // Environment variables to set when running CMake commands
  "cmake.environment": {},

  // The CMake generator to use
  "cmake.generator": null,

  // The directory where CMake installed files will go.
  "cmake.installPrefix": null,

  // 
  "cmake.loggingLevel": "info",

  // Directories where MinGW may be installed
  "cmake.mingwSearchDirs": [
    "C:\\MinGW"
  ],

  // The number of parallel build jobs. Use zero to automatically detect the number of CPUs.
  "cmake.parallelJobs": 0,

  // Parse compiler output for warnings and errors
  "cmake.parseBuildDiagnostics": true,

  // The CMake platform to use when configuring
  "cmake.platform": null,

  // The preferred CMake generator(s) to use when configuring (tried in order of listing)
  "cmake.preferredGenerators": [
    "Ninja",
    "Unix Makefiles"
  ],

  // Save open files before building
  "cmake.saveBeforeBuild": true,

  // The directory of the root CMakeLists.txt file
  "cmake.sourceDirectory": "${workspaceRoot}",

  // Environment variables to pass to CTest
  "cmake.testEnvironment": {},

  // The CMake toolset to use when configuring
  "cmake.toolset": null,

  // Enable CMake server
  "cmake.useCMakeServer": true

}
,
{


  // The path to CMake generator executable
  "cmake.cmakePath": "cmake"

}
,
{


  // Display shader frame time graph in corner of display.
  "shader-toy.printShaderFrameTime": true,

  // Reload OpenGL viewport when editor changes.
  "shader-toy.reloadOnChangeEditor": false,

  // The texture channels (iChannel0, iChannel1, ...) using http:// or file:// protocol.
  "shader-toy.textures": {
    "0": "",
    "1": ""
  },

  // Allow texture channel resources to be defined in shader source (#iChannel0 source).
  "shader-toy.useInShaderTextures": false

}
,
{


  // markdownlint config object
  "markdownlint.config": {
    "MD013": false
  },

  // Array of paths for custom rules to include when linting
  "markdownlint.customRules": [],

  // Array of file names and glob expressions to ignore when linting
  "markdownlint.ignore": [],

  // Run the linter on save (onSave) or on type (onType)
  "markdownlint.run": "onType"

}
,
{


  // Controls whether auto detection of npm scripts is on or off. Default is on.
  "npm.autoDetect": "on",

  // Enable an explorer view for npm scripts.
  "npm.enableScriptExplorer": false,

  // Configure glob patterns for folders that should be excluded from automatic script detection.
  "npm.exclude": "",

  // The package manager used to run scripts.
  "npm.packageManager": "npm",

  // Run npm commands with the `--silent` option.
  "npm.runSilent": false,

  // The default click action used in the scripts explorer: 'open' or 'run', the default is 'open'.
  "npm.scriptExplorerAction": "open"

}
,
{


  // Linter arguments to check LaTeX syntax of the current file state in real time with ChkTeX.
  // Arguments must be in separate strings in the array. Additional arguments, i.e., `-I0 -f%f:%l:%c:%d:%k:%n:%m\n` will be appended when constructing the command. Current file contents will be piped to the command through stdin.
  "latex-workshop.chktex.args.active": [
    "-wall",
    "-n22",
    "-n30",
    "-e16",
    "-q"
  ],

  // Linter arguments to check LaTeX syntax of the entire project from the root file with ChkTeX.
  // Arguments must be in separate strings in the array. Additional arguments, i.e., `-f%f:%l:%c:%d:%k:%n:%m\n %DOC%` will be appended when constructing the command.
  "latex-workshop.chktex.args.root": [
    "-wall",
    "-n22",
    "-n30",
    "-e16",
    "-q"
  ],

  // Enable linting LaTeX with ChkTeX.
  // The active document will be linted when no document changes for a defined period of time.
  // The full project will be linted from the root on file save.
  "latex-workshop.chktex.enabled": false,

  // Defines the time interval in milliseconds between invoking LaTeX linter on the active file.
  "latex-workshop.chktex.interval": 300,

  // Define the location of ChkTeX executive file.
  // This command will be joint with `latex-workshop.chktex.args.*` and required arguments to form a complete command of ChkTeX.
  "latex-workshop.chktex.path": "chktex",

  // Enable docker-based LaTeX distribution support.
  // Do not set this item to `true` unless you are aware of what it means.
  // This extension will use `tianon/latex` and `mcandre/docker-chktex` binaries to replace `latexmk`, `synctex`, `texcount`, `latexindent` and `chktex`.
  "latex-workshop.docker.enabled": false,

  // Defines what to show as suggestion labels when intellisense provides citation suggestions.
  "latex-workshop.intellisense.citation.label": "bibtex key",

  // Defines the maximum bibtex file size for the extension to parse in MB.
  "latex-workshop.intellisense.citation.maxfilesizeMB": 5,

  // Defines which type of hint to show when intellisense provides citation suggestions.
  "latex-workshop.intellisense.citation.type": "inline",

  // When `\` is typed with text selected, surround the selection with LaTeX command.
  "latex-workshop.intellisense.surroundCommand.enabled": false,

  // Addition bibliography files to watch.
  // Both relative and absolute paths/globs are supported, but absolute ones are suggested. Relative path start from the root file location, so be ware if it is located in sub-directory.
  "latex-workshop.latex.additionalBib": [],

  // Delete LaTeX auxillary files when errors occur during build and retry.
  // This property defines whether LaTeX Workshop will try to clean and build the project once again after errors happen in the build toolchain.
  "latex-workshop.latex.autoBuild.cleanAndRetry.enabled": true,

  // Build LaTeX after saving LaTeX source file.
  // This property defines whether LaTeX Workshop will execute the LaTeX toolchain command(s) to build the project after new LaTeX contents are saved.
  "latex-workshop.latex.autoBuild.onSave.enabled": true,

  // Build LaTeX after a LaTeX source file has changed in the workspace.
  // This property defines whether LaTeX Workshop will execute the LaTeX toolchain command(s) to build the project after any LaTeX file in the workspace is saved on the disk which is not open in the active editor window.
  "latex-workshop.latex.autoBuild.onTexChange.enabled": false,

  // Delete LaTeX auxillary files after building project.
  // This property defines whether LaTeX Workshop will clean up all unnecessary files after building the project.
  "latex-workshop.latex.clean.enabled": false,

  // Files to clean.
  // This property must be an array of strings. File globs such as *.removeme, something?.aux can be used.
  "latex-workshop.latex.clean.fileTypes": [
    "*.aux",
    "*.bbl",
    "*.blg",
    "*.idx",
    "*.ind",
    "*.lof",
    "*.lot",
    "*.out",
    "*.toc",
    "*.acn",
    "*.acr",
    "*.alg",
    "*.glg",
    "*.glo",
    "*.gls",
    "*.ist",
    "*.fls",
    "*.log",
    "*.fdb_latexmk"
  ],

  // Define the arguments to be input to magic command executable.
  "latex-workshop.latex.magic.args": [
    "-synctex=1",
    "-interaction=nonstopmode",
    "-file-line-error",
    "%DOC%"
  ],

  // Define the arguments to be input to BIB magic command executable.
  "latex-workshop.latex.magic.bib.args": [
    "%DOCFILE%"
  ],

  // The directory where the extension tries to find project files (e.g., PDF and SyncTeX files) are located.
  // Both relative and absolute pathes are supported. Relative path start from the root file location, so beware if it is located in sub-directory.
  // The LaTeX toolchain should output files to this path.
  "latex-workshop.latex.outputDir": "./",

  // Define LaTeX compiling recipes.
  // Each recipe in the list is an object declares its name and the names of tools to be used sequentially, which are defined in `latex-workshop.latex.tools`.
  // By default, the first recipe is used to compile the project. For details, please visit https://github.com/James-Yu/LaTeX-Workshop#recipe.
  "latex-workshop.latex.recipes": [
    {
      "name": "latexmk",
      "tools": [
        "latexmk"
      ]
    },
    {
      "name": "pdflatex -> bibtex -> pdflatex*2",
      "tools": [
        "pdflatex",
        "bibtex",
        "pdflatex",
        "pdflatex"
      ]
    }
  ],

  // Define LaTeX compiling tools to be used in recipes.
  // Each tool is labeled by its `name`. When invoked, `command` is spawned with arguments defined in `args`. Typically no spaces should appear in each argument unless in paths.
  // Placeholder `%DOC%`, `%DOCFILE`, and `%DIR%` is available. For details, please visit https://github.com/James-Yu/LaTeX-Workshop#recipe.
  "latex-workshop.latex.tools": [
    {
      "name": "latexmk",
      "command": "latexmk",
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "-pdf",
        "%DOC%"
      ]
    },
    {
      "name": "pdflatex",
      "command": "pdflatex",
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "%DOC%"
      ]
    },
    {
      "name": "bibtex",
      "command": "bibtex",
      "args": [
        "%DOCFILE%"
      ]
    }
  ],

  // Define the command line arguments for latexindent. Available placeholders:
  // - %DOC%, %DOCFILE%, %DIR%: same as latex-workshop.latex.toolchain args.
  // - %TMPFILE%: would be replaced with the path of file which contains raw TeX source to be formatted. At this moment you need to use it as an input file of `latexindent`.
  // - %INDENT%: would be replaced with the string which represents indent of the target document.
  // 
  // Note: At this moment -c option requires trailing slash.
  "latex-workshop.latexindent.args": [
    "-c",
    "%DIR%/",
    "%TMPFILE%",
    "-y=\"defaultIndent: '%INDENT%'\""
  ],

  // Define the location of the latexindent executable file.
  "latex-workshop.latexindent.path": "latexindent",

  // Show badbox information in the problems panel.
  "latex-workshop.message.badbox.show": true,

  // Display error messages in popup notifications.
  "latex-workshop.message.error.show": true,

  // Display information messages in popup notifications.
  "latex-workshop.message.information.show": false,

  // Display LaTeX Workshop debug log in output panel.
  // This property defines whether LaTeX Workshop will output its debug log to the log panel.
  "latex-workshop.message.log.show": true,

  // Display LaTeX Workshop update message on new versions.
  "latex-workshop.message.update.show": true,

  // Display warning messages in popup notifications.
  "latex-workshop.message.warning.show": true,

  // Execute forward synctex at cursor position after compiling LaTeX project.
  "latex-workshop.synctex.afterBuild.enabled": false,

  // Define the location of SyncTeX executive file.
  // Additional arguments, e.g., synctex modes and position of click, will be appended to this command.
  "latex-workshop.synctex.path": "synctex",

  // TeXCount arguments to count words in LaTeX document of the entire project from the root file, or the currect document.
  // Arguments must be in separate strings in the array. Additional arguments, i.e., `-merge %DOC%` for the project and the current document path for counting current file will be appended when constructing the command.
  "latex-workshop.texcount.args": [],

  // Define the location of TeXCount executive file/script.
  // This command will be joint with `latex-workshop.texcount.args` and required arguments to form a complete command of TeXCount.
  "latex-workshop.texcount.path": "texcount",

  // The section names of LaTeX outline hierarchy.
  // This property is an array of case-sensitive strings in the order of document structure hierarchy. For multiple tags in the same level, seperate the tags with `|` as delimiters, e.g., `section|alternative`.
  "latex-workshop.view.outline.sections": [
    "chapter",
    "section",
    "subsection",
    "subsubsection"
  ],

  // The command to execute when using external viewer.
  // This function is not officially supported. %PDF% is the placeholder for the absolute path to the generated PDF file.
  "latex-workshop.view.pdf.external.command": {
    "command": "SumatraPDF.exe",
    "args": [
      "%PDF%"
    ]
  },

  // The command to execute when forward synctex to external viewer.
  // This function is not officially supported. %LINE% is the line number, %PDF% is the placeholder for the absolute path to the generated PDF file, and %TEX% is the source LaTeX file path with `.tex` extension from which syncTeX is fired.
  "latex-workshop.view.pdf.external.synctex": {
    "command": "SumatraPDF.exe",
    "args": [
      "%LINE%",
      "%PDF%",
      "%TEX%"
    ]
  },

  // Define if the hand tool is enabled by default in the PDF viewer.
  "latex-workshop.view.pdf.hand": false,

  // Define the CSS invert filter level of the PDF viewer.
  // This config can invert the color of PDF. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invert": 0,

  // The default PDF viewer.
  "latex-workshop.view.pdf.viewer": "none",

  // The default zoom level of the PDF viewer.
  // This default value will be passed to the viewer upon opening. Possible values are `auto`, `page-actual`, `page-fit`, `page-width`, and one-based scale values (e.g., 0.5 for 50%, 2.0 for 200%).
  "latex-workshop.view.pdf.zoom": "auto"

}
,
{

